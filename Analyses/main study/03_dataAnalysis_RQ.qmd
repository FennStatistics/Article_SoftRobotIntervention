---
title: "Data analyses for S2 research questions"
author: "Julius Fenn, Louisa Estadieu"
format:
  html:
    toc: true
    toc-depth: 4
    html-math-method: katex
---



# Notes


# load cleaned data files

```{r}
#| label: load cleaned data files
#| warning: false

# sets the directory of location of this script as the current directory
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))

### load packages
require(pacman)
p_load('tidyverse', 'jsonlite', 'magrittr', 'xlsx',
       'stargazer', 'psych', 'jtools', 'DT', 'ggstatsplot', 
       'lavaan', 
       'regsem', 'MplusAutomation', 'igraph', 'openxlsx',
       'reshape2')


setwd("outputs/01_dataPreperation/final")

### load questionnaire
questionnaire <- readRDS(file = "questionnaire_final.rds")
questionnaireCAMs <- readRDS(file = "questionnaireCAMs_final.rds")


### add type robot
questionnaire$choosen_Robot <- ifelse(test = questionnaire$choosen_Robot == "Rettungsroboter", yes = "rescue robot", no = "social assistance robot")

questionnaireCAMs$choosen_Robot <- ifelse(test = questionnaireCAMs$choosen_Robot == "Rettungsroboter", yes = "rescue robot", no = "social assistance robot")

networkIndicators_pre <- readRDS(file = "networkIndicators_pre_final.rds")
networkIndicators_post <- readRDS(file = "networkIndicators_post_final.rds")

# CAMfiles_combined <- readRDS(file = "CAMfiles_combined_final.rds")
CAMfiles_combined <- readRDS(file = "CAMfiles_combined_final_translated.rds")

CAMfiles_pre <- readRDS(file = "CAMfiles_pre_final.rds")
CAMfiles_post <- readRDS(file = "CAMfiles_post_final.rds")


### load functions
# print(getwd())
setwd("../../../../functions")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}


setwd("../functions_CAMapp")
for(i in 1:length(dir())){
  # print(dir()[i])
  source(dir()[i], encoding = "utf-8")
}
rm(i)



### summary function
data_summary <- function(data, varname, groupnames){
  require(plyr)
  summary_func <- function(x, col){
    c(mean = mean(x[[col]], na.rm=TRUE),
      se = sd(x[[col]], na.rm=TRUE) / sqrt(length(x[[col]])))
  }
  data_sum<-ddply(data, groupnames, .fun=summary_func,
                  varname)
  data_sum <- plyr::rename(data_sum, c("mean" = varname))
  return(data_sum)
}
```

# descriptives

```{r}
table(questionnaireCAMs$typeChange)
round(x = table(questionnaireCAMs$typeChange) / nrow(questionnaireCAMs) * 100, digits = 2)
```

# data preperation


## only keep B, D

only keep B, D:

```{r}
tmp_ids <- questionnaireCAMs$PROLIFIC_PID[questionnaireCAMs$typeChange %in% c("B", "D")]

networkIndicators_pre <- networkIndicators_pre[str_remove_all(string = networkIndicators_pre$participantCAM, pattern = "_pre$") %in% tmp_ids, ]
networkIndicators_post <- networkIndicators_post[str_remove_all(string = networkIndicators_post$participantCAM, pattern = "_post$") %in% tmp_ids, ]

questionnaire <- questionnaire[questionnaire$PROLIFIC_PID %in% tmp_ids, ]
questionnaireCAMs <- questionnaireCAMs[questionnaireCAMs$PROLIFIC_PID %in% tmp_ids, ]

CAMfiles_combined[[1]] <- CAMfiles_combined[[1]][CAMfiles_combined[[1]]$participantCAM %in% tmp_ids, ]
CAMfiles_combined[[2]] <- CAMfiles_combined[[2]][CAMfiles_combined[[2]]$participantCAM %in% tmp_ids, ]
CAMfiles_combined[[3]] <- CAMfiles_combined[[3]][CAMfiles_combined[[3]]$participantCAM.y %in% tmp_ids, ] 
```

## add IDs to CAMfiles_combined

```{r}
CAMfiles_combined[[1]]$participantCAM[CAMfiles_combined[[1]]$CAM %in% CAMfiles_pre[[1]]$CAM] <- paste0(CAMfiles_combined[[1]]$participantCAM[CAMfiles_combined[[1]]$CAM %in% CAMfiles_pre[[1]]$CAM], "_pre")

CAMfiles_combined[[1]]$participantCAM[CAMfiles_combined[[1]]$CAM %in% CAMfiles_post[[1]]$CAM] <- paste0(CAMfiles_combined[[1]]$participantCAM[CAMfiles_combined[[1]]$CAM %in% CAMfiles_post[[1]]$CAM], "_post")
```

## set up long data

```{r}
# prepare data
### add pre post
networkIndicators_pre$timepoint <- "rigid"
networkIndicators_post$timepoint <- "soft"

### long data format
networkIndicators_long <- rbind(networkIndicators_pre, networkIndicators_post)

### ad ID
networkIndicators_long$ID <- c(1:(nrow(networkIndicators_long) / 2), 1:(nrow(networkIndicators_long) / 2))

### reformat variable
networkIndicators_long$timepoint <- factor(networkIndicators_long$timepoint, 
                                           levels = c("rigid", "soft"), 
                                           ordered = FALSE)

### add type robot
networkIndicators_long$typeRobot <- ifelse(test = !is.na(networkIndicators_long$valence_micro_Rettungsroboter), yes = "rescue robot", no = "social assistance robot")
table(networkIndicators_long$typeRobot)
table(questionnaireCAMs$choosen_Robot) * 2
```


# describe sample


```{r}
table(questionnaireCAMs$choosen_Robot)
# age for one person is missing
psych::describe(questionnaireCAMs[, c("socio_age")])
hist(questionnaireCAMs$socio_age)

# sex:
table(questionnaireCAMs$socio_sex)
round(x = table(questionnaireCAMs$socio_sex) / nrow(questionnaireCAMs) * 100, digits = 2)

table(questionnaireCAMs$socio_student)
table(questionnaireCAMs$socio_employment)

## split by robot
psych::describe(socio_age ~ choosen_Robot, data = questionnaireCAMs)
table(questionnaireCAMs$socio_sex, questionnaireCAMs$choosen_Robot)
```

## feedback to the study


Question: Do you have any feedback or criticism of the online study? (in German)

```{r}
DT::datatable(questionnaireCAMs[,c("PROLIFIC_PID", "feedback_critic")], options = list(pageLength = 5)) 
```

## technical problems CAMEL

```{r}
DT::datatable(questionnaireCAMs[,c("PROLIFIC_PID", str_subset(string = colnames(questionnaireCAMs), pattern = "^feedCAM"))], options = list(pageLength = 5)) 

## technical problems
table(questionnaireCAMs$feedCAM_technicalprobs)
questionnaireCAMs$feedCAM_technicalprobsText[questionnaireCAMs$feedCAM_technicalprobs == 1]


hist(questionnaire$feedCAM_repres)
summary(questionnaire$feedCAM_repres)
psych::describe(x = questionnaire$feedCAM_repres)
```




# R1: Perceived risks and benefits quantitative

## average emotional evaluation

```{r}
### post - pre difference of robot -> average valence
fit1 <- afex::aov_car(mean_valence_macro ~ timepoint*typeRobot + Error(ID / timepoint),
                      data = networkIndicators_long)
fit1a <- afex::aov_ez(id = "ID", dv = "mean_valence_macro",
                      data = networkIndicators_long, between=c("typeRobot"), within=c("timepoint"))
# partical eta squared
anova(fit1, es = "pes")
# generalized eta squared
fit1a # > identical results


dfvalcor <- data_summary(networkIndicators_long, varname="mean_valence_macro",
                         groupnames=c("timepoint","typeRobot"))

dfvalcor$timepoint <- factor(dfvalcor$timepoint, levels = c("rigid", "soft"))

p <- ggplot(dfvalcor, aes(x=timepoint, y=mean_valence_macro, fill=typeRobot)) +
  geom_bar(stat="identity", color="black",
           position=position_dodge()) +
  geom_errorbar(aes(ymin=mean_valence_macro-se, ymax=mean_valence_macro+se), width=.2,
                position=position_dodge(.9)) + ggplot_theme + ylab(label = "average emotional evaluation") + 
  theme(axis.title.x = element_text(size=20), axis.title.y = element_text(size=20), axis.text.x = element_text(size = 18), axis.text.y = element_text(size = 18), legend.text = element_text(size=16), legend.title = element_text(size=18))
print(p)
```


## number of drawn concepts

### overall 


```{r}
### post - pre difference of robot -> number of concepts
fit1 <- afex::aov_car(num_nodes_macro ~ timepoint*typeRobot + Error(ID / timepoint),
                      data = networkIndicators_long)
fit1a <- afex::aov_ez(id = "ID", dv = "num_nodes_macro",
                      data = networkIndicators_long, between=c("typeRobot"), within=c("timepoint"))
# partical eta squared
anova(fit1, es = "pes")
# generalized eta squared
fit1a # > identical results


dfvalcor <- data_summary(networkIndicators_long, varname="num_nodes_macro",
                         groupnames=c("timepoint","typeRobot"))

dfvalcor$timepoint <- factor(dfvalcor$timepoint, levels = c("rigid", "soft"))

p <- ggplot(dfvalcor, aes(x=timepoint, y=num_nodes_macro, fill=typeRobot)) +
  geom_bar(stat="identity", color="black",
           position=position_dodge()) +
  geom_errorbar(aes(ymin=num_nodes_macro-se, ymax=num_nodes_macro+se), width=.2,
                position=position_dodge(.9)) + ggplot_theme + ylab(label = "number of concepts") + 
  theme(axis.title.x = element_text(size=20), axis.title.y = element_text(size=20), axis.text.x = element_text(size = 18), axis.text.y = element_text(size = 18), legend.text = element_text(size=16), legend.title = element_text(size=18))
print(p)
```


### positive 

```{r}
### post - pre difference of robot -> number of concepts
fit1 <- afex::aov_car(num_nodes_pos_macro ~ timepoint*typeRobot + Error(ID / timepoint),
                      data = networkIndicators_long)
fit1a <- afex::aov_ez(id = "ID", dv = "num_nodes_pos_macro",
                      data = networkIndicators_long, between=c("typeRobot"), within=c("timepoint"))
# partical eta squared
anova(fit1, es = "pes")
# generalized eta squared
fit1a # > identical results


dfvalcor <- data_summary(networkIndicators_long, varname="num_nodes_pos_macro",
                         groupnames=c("timepoint","typeRobot"))

dfvalcor$timepoint <- factor(dfvalcor$timepoint, levels = c("rigid", "soft"))

p <- ggplot(dfvalcor, aes(x=timepoint, y=num_nodes_pos_macro, fill=typeRobot)) +
  geom_bar(stat="identity", color="black",
           position=position_dodge()) +
  geom_errorbar(aes(ymin=num_nodes_pos_macro-se, ymax=num_nodes_pos_macro+se), width=.2,
                position=position_dodge(.9)) + ggplot_theme + ylab(label = "number of positive concepts") + 
  theme(axis.title.x = element_text(size=20), axis.title.y = element_text(size=20), axis.text.x = element_text(size = 18), axis.text.y = element_text(size = 18), legend.text = element_text(size=16), legend.title = element_text(size=18))
print(p)
```


### negative 

```{r}
### post - pre difference of robot -> number of concepts
fit1 <- afex::aov_car(num_nodes_neg_macro ~ timepoint*typeRobot + Error(ID / timepoint),
                      data = networkIndicators_long)
fit1a <- afex::aov_ez(id = "ID", dv = "num_nodes_neg_macro",
                      data = networkIndicators_long, between=c("typeRobot"), within=c("timepoint"))
# partical eta squared
anova(fit1, es = "pes")
# generalized eta squared
fit1a # > identical results


dfvalcor <- data_summary(networkIndicators_long, varname="num_nodes_neg_macro",
                         groupnames=c("timepoint","typeRobot"))

dfvalcor$timepoint <- factor(dfvalcor$timepoint, levels = c("rigid", "soft"))

p <- ggplot(dfvalcor, aes(x=timepoint, y=num_nodes_neg_macro, fill=typeRobot)) +
  geom_bar(stat="identity", color="black",
           position=position_dodge()) +
  geom_errorbar(aes(ymin=num_nodes_neg_macro-se, ymax=num_nodes_neg_macro+se), width=.2,
                position=position_dodge(.9)) + ggplot_theme + ylab(label = "number of negative concepts") + 
  theme(axis.title.x = element_text(size=20), axis.title.y = element_text(size=20), axis.text.x = element_text(size = 18), axis.text.y = element_text(size = 18), legend.text = element_text(size=16), legend.title = element_text(size=18))
print(p)
```

### ambivalent 


```{r}
### post - pre difference of robot -> number of concepts
fit1 <- afex::aov_car(num_nodes_ambi_macro ~ timepoint*typeRobot + Error(ID / timepoint),
                      data = networkIndicators_long)
fit1a <- afex::aov_ez(id = "ID", dv = "num_nodes_ambi_macro",
                      data = networkIndicators_long, between=c("typeRobot"), within=c("timepoint"))
# partical eta squared
anova(fit1, es = "pes")
# generalized eta squared
fit1a # > identical results


dfvalcor <- data_summary(networkIndicators_long, varname="num_nodes_ambi_macro",
                         groupnames=c("timepoint","typeRobot"))

dfvalcor$timepoint <- factor(dfvalcor$timepoint, levels = c("rigid", "soft"))

p <- ggplot(dfvalcor, aes(x=timepoint, y=num_nodes_ambi_macro, fill=typeRobot)) +
  geom_bar(stat="identity", color="black",
           position=position_dodge()) +
  geom_errorbar(aes(ymin=num_nodes_ambi_macro-se, ymax=num_nodes_ambi_macro+se), width=.2,
                position=position_dodge(.9)) + ggplot_theme + ylab(label = "number of ambivalent concepts") + 
  theme(axis.title.x = element_text(size=20), axis.title.y = element_text(size=20), axis.text.x = element_text(size = 18), axis.text.y = element_text(size = 18), legend.text = element_text(size=16), legend.title = element_text(size=18))
print(p)
```


## additional analysis

```{r}
networkIndicators_long_within <- networkIndicators_long
networkIndicators_long_within$participantCAM <- str_remove(string = networkIndicators_long_within$participantCAM, pattern = "_pre$|_post$")


# positive concepts
## parametric t-test
ggwithinstats(
  data = networkIndicators_long_within,
  x = timepoint,
  y = num_nodes_pos_macro,
  type = "p",
  effsize.type = "d",
  conf.level = 0.95,
  title = "Parametric test"
)

# frequencies
## for positive concepts
tmp <- data.frame(post = networkIndicators_long_within$num_nodes_pos_macro[networkIndicators_long_within$timepoint == "rigid"], pre = networkIndicators_long_within$num_nodes_pos_macro[networkIndicators_long_within$timepoint == "soft"])
tmp$diff <- tmp$pre - tmp$post
tmp$diff_boolean <- tmp$diff == 0
psych::describe(tmp$diff)
sum(tmp$diff_boolean) / nrow(tmp)


# negative concepts
## parametric t-test
ggwithinstats(
  data = networkIndicators_long_within,
  x = timepoint,
  y = num_nodes_neg_macro,
  type = "p",
  effsize.type = "d",
  conf.level = 0.95,
  title = "Parametric test"
)

# frequencies
## for negative concepts
tmp <- data.frame(post = networkIndicators_long_within$num_nodes_neg_macro[networkIndicators_long_within$timepoint == "rigid"], pre = networkIndicators_long_within$num_nodes_neg_macro[networkIndicators_long_within$timepoint == "soft"])
tmp$diff <- tmp$pre - tmp$post
tmp$diff_boolean <- tmp$diff == 0
psych::describe(tmp$diff)
sum(tmp$diff_boolean) / nrow(tmp)
```


# R2: Perceived risks and benefits qualitative

## overall perspective


```{r}
ids_participants <- str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$")
ids_participants <- unique(ids_participants)

## number of participants
length(ids_participants)

## get dummy variable for pre / post
CAMfiles_combined[[1]]$timepoint <- str_extract_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "pre$|post$", simplify = TRUE)
# reformat variable
CAMfiles_combined[[1]]$timepoint <- factor(CAMfiles_combined[[1]]$timepoint, 
                                           levels = c("pre", "post"), 
                                           ordered = FALSE)
## get categories
CAMfiles_combined[[1]]$category <- str_remove_all(string = CAMfiles_combined[[1]]$text_summarized, pattern = "_positive$|_negative$|_ambivalent$|_neutral$")



## get condition
CAMfiles_combined[[1]]$condition <- NA
CAMfiles_combined[[1]]$condition[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% questionnaireCAMs$PROLIFIC_PID[questionnaireCAMs$choosen_Robot == "social assistance robot"]] <- "social assistance robot"
CAMfiles_combined[[1]]$condition[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% questionnaireCAMs$PROLIFIC_PID[questionnaireCAMs$choosen_Robot == "rescue robot"]] <- "rescue robot"





ids_categories <- CAMfiles_combined[[1]]$category
ids_categories <- unique(ids_categories)

ids_categories <- ids_categories[!ids_categories %in% c("RR", "SAR", "benefits", "risks")]


## number of categories
length(ids_categories)


table(CAMfiles_combined[[1]]$category)
table(CAMfiles_combined[[1]]$timepoint)
```

prepare data

```{r}
allConcepts_pre <- CAMfiles_combined[[1]][str_detect(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$"), ]
allConcepts_post <- CAMfiles_combined[[1]][str_detect(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_post$"), ]
```

## CAMs, which added many concepts

```{r}
networkIndicators_post$diffConcepts <- networkIndicators_post$num_nodes_macro - networkIndicators_pre$num_nodes_macro

cbind(networkIndicators_post$diffConcepts[order(networkIndicators_post$diffConcepts, decreasing = TRUE)][1:12], networkIndicators_post$participantCAM[order(networkIndicators_post$diffConcepts, decreasing = TRUE)][1:12])
```



## split by category

*not sensitive if concept was deleted!*

```{r}

table(CAMfiles_combined[[1]]$category, CAMfiles_combined[[1]]$timepoint)


mat <- table(CAMfiles_combined[[1]]$category, CAMfiles_combined[[1]]$condition)
mat[,1] <- round(x = mat[,1] / sum(questionnaireCAMs$choosen_Robot == "rescue robot"), digits = 2)
mat[,2] <- round(x = mat[,2] / sum(questionnaireCAMs$choosen_Robot == "social assistance robot"), digits = 2)
mat
```





## split by category and individual

### create lists


```{r}
## create lists
list_text_constant <- list()
list_text_old <- list()
list_text_new <- list()

for (c in ids_categories) {
  list_text_constant[[c]] <- list()
  list_text_old[[c]] <- list()
  list_text_new[[c]] <- list()
  for (i in 1:length(ids_participants)) {
    list_text_constant[[c]][[i]] <- NA
    list_text_old[[c]][[i]] <- NA
    list_text_new[[c]][[i]] <- NA
    
  }
  
  names(list_text_constant[[c]]) <- ids_participants
  names(list_text_old[[c]]) <- ids_participants
  names(list_text_new[[c]]) <- ids_participants
  
}


for (i in 1:length(ids_participants)) {
  tmp_pre <-
    CAMfiles_combined[[1]][CAMfiles_combined[[1]]$participantCAM %in% paste0(ids_participants[i], "_pre"), ]
  tmp_post <-
    CAMfiles_combined[[1]][CAMfiles_combined[[1]]$participantCAM %in% paste0(ids_participants[i], "_post"), ]
  
  
  for (c in 1:length(ids_categories)) {
    if (any(
      c(
        tmp_pre$category %in% ids_categories[c],
        tmp_post$category %in% ids_categories[c]
      )
    )) {
      ## manually check if you miss any words
      if (length(table(tmp_pre$text[tmp_pre$category %in% ids_categories[c]])[table(tmp_pre$text[tmp_pre$category %in% ids_categories[c]]) >= 2]) >= 1) {
        cat("i post:", i, "in c:", c, "\n")
      }
      if (length(table(tmp_post$text[tmp_post$category %in% ids_categories[c]])[table(tmp_post$text[tmp_post$category %in% ids_categories[c]]) >= 2]) >= 1) {
        cat("i post:", i, "in c:", c, "\n")
      }
      
      
      text_vec_pre <-
        tmp_pre$text[tmp_pre$category %in% ids_categories[c]]
      text_vec_post <-
        tmp_post$text[tmp_post$category %in% ids_categories[c]]
      
      ## constant
      if (length(text_vec_pre[text_vec_pre %in% text_vec_post]) >= 1) {
        list_text_constant[[ids_categories[c]]][[i]] <-
          text_vec_pre[text_vec_pre %in% text_vec_post]
      }
      ## old and deleted
      if (length(text_vec_pre[!text_vec_pre %in% text_vec_post]) >= 1) {
        list_text_old[[ids_categories[c]]][[i]] <-
          text_vec_pre[!text_vec_pre %in% text_vec_post]
      }
      
      ## new
      if (length(text_vec_post[!text_vec_post %in% text_vec_pre]) >= 1) {
        list_text_new[[ids_categories[c]]][[i]] <-
          text_vec_post[!text_vec_post %in% text_vec_pre]
      }
    }
  }
}
```

### describe lists

overall:

```{r}
## constant (not deleted or added)
length(unlist(list_text_constant)[!is.na(unlist(list_text_constant))])
## old = deleted
length(unlist(list_text_old)[!is.na(unlist(list_text_old))])
## new
length(unlist(list_text_new)[!is.na(unlist(list_text_new))])
```

### get descriptive tables for each type of robot

separately for categories:

```{r}
### args:
# chooseRobot = "rescue robot"
# numParticipants =  sum(questionnaire$choosen_Robot == "rescue robot")


getDescriptiveTable <- function(chooseRobot, numParticipants){
  dat <- data.frame(category = ids_categories, CAMs = NA, 
                  Nconstant = NA, Nold = NA, Nnew = NA, 
           Mconstant = NA, Mold = NA, Mnew = NA)

for (c in 1:length(ids_categories)) {
  tmp_constant <- list_text_constant[[ids_categories[c]]]
  tmp_constant <- tmp_constant[!is.na(tmp_constant)]
  
  tmp_old <- list_text_old[[ids_categories[c]]]
  tmp_old <- tmp_old[!is.na(tmp_old)]
  
  tmp_new <- list_text_new[[ids_categories[c]]]
  tmp_new <- tmp_new[!is.na(tmp_new)]
  
  
  tmp_constant <- tmp_constant[names(tmp_constant) %in% questionnaire$PROLIFIC_PID[questionnaire$choosen_Robot == chooseRobot]]
  tmp_old <- tmp_old[names(tmp_old) %in% questionnaire$PROLIFIC_PID[questionnaire$choosen_Robot == chooseRobot]]
  tmp_new <- tmp_new[names(tmp_new) %in% questionnaire$PROLIFIC_PID[questionnaire$choosen_Robot == chooseRobot]]

  
  dat[c,]$CAMs <- length(unique(c(names(tmp_constant), names(tmp_old), names(tmp_new))))
  

  dat[c,]$Nconstant <- length(unlist(tmp_constant))
  dat[c,]$Nold <- length(unlist(tmp_old))
  dat[c,]$Nnew <- length(unlist(tmp_new))

  

  vec_constant_valence <- list()

  for(j in 1:length(tmp_constant)){
         # cat("get error:", c, j,"\n")

    
    
    vec_constant_valence[[j]] <- CAMfiles_combined[[1]]$value[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% names(tmp_constant)[j] & CAMfiles_combined[[1]]$text %in% tmp_constant[[j]]]
    
   if(any(CAMfiles_combined[[1]]$value[CAMfiles_combined[[1]]$participantCAM %in% paste0(names(tmp_constant)[j], "_pre") & CAMfiles_combined[[1]]$text %in% tmp_constant[[j]]] != CAMfiles_combined[[1]]$value[CAMfiles_combined[[1]]$participantCAM %in% paste0(names(tmp_constant)[j], "_post") & CAMfiles_combined[[1]]$text %in% tmp_constant[[j]]])){
     cat("changed valence of constant words in category", ids_categories[c], "person with id", names(tmp_constant)[j],"\n")
   }
  }
  
  tmp <- ifelse(test = unlist(vec_constant_valence) == 10, yes = 0, no = unlist(vec_constant_valence))
    dat[c,]$Mconstant <- paste0(round(x =  mean(tmp), digits = 2), " (", round(x =  sd(tmp), digits = 2), ")")


  if(length(tmp_old) >= 1){
        vec_old_valence <- list()
    for(j in 1:length(tmp_old)){
        vec_old_valence[[j]] <- CAMfiles_combined[[1]]$value[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% names(tmp_old)[j] & CAMfiles_combined[[1]]$text %in% tmp_old[[j]]]
  }
  
        
          tmp <- ifelse(test = unlist(vec_old_valence) == 10, yes = 0, no = unlist(vec_old_valence))
    dat[c,]$Mold <- paste0(round(x =  mean(tmp), digits = 2), " (", round(x =  sd(tmp), digits = 2), ")")
        
  }


    
        vec_new_valence <- list()
    for(j in 1:length(tmp_new)){
        vec_new_valence[[j]] <- CAMfiles_combined[[1]]$value[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% names(tmp_new)[j] & CAMfiles_combined[[1]]$text %in% tmp_new[[j]]]
    }
        
               tmp <- ifelse(test = unlist(vec_new_valence) == 10, yes = 0, no = unlist(vec_new_valence))
    dat[c,]$Mnew <- paste0(round(x =  mean(tmp), digits = 2), " (", round(x =  sd(tmp), digits = 2), ")")
}
  
  dat$CAMs <- round(x = dat$CAMs / numParticipants * 100, digits = 2)
dat$Nnew <- round(x = dat$Nnew / numParticipants * 1, digits = 2)
dat$Nold <- round(x = dat$Nold / numParticipants * 1, digits = 2)
dat$Nconstant <- round(x = dat$Nconstant / numParticipants * 1, digits = 2)

colnames(dat) <- c("category", "perCAMs", "avgConstant", "avgOld", "avgNew", "Mconstant", "Mold", "Mnew")
  return(dat)
} 
```




```{r}
#| warning: false

## for rescue robot
num <- sum(questionnaire$choosen_Robot == "rescue robot")
tmp_RR <- getDescriptiveTable(chooseRobot = "rescue robot", numParticipants = num)
DT::datatable(data = tmp_RR)

## for social assistance robot
num <- sum(questionnaire$choosen_Robot == "social assistance robot")
tmp_SAR <- getDescriptiveTable(chooseRobot = "social assistance robot", numParticipants = num)
DT::datatable(data = tmp_SAR)

```


save as HTML: 

```{r}
setwd("outputs/03_dataAnalysis_RQ")
stargazer(tmp_RR, type = "html", out = "rescue robot_table.html", summary = FALSE)
stargazer(tmp_SAR, type = "html", out = "social assistance robot_table.html", summary = FALSE)
```


```{r}
# Data for r1
data_r1 <- tmp_RR[!tmp_RR$category %in% c("RCPP", "RCPN", "RCN", "RCA"), c("category", "avgConstant", "avgNew")]
data_r1$group = "RR"
colnames(data_r1)[c(2,3)] <- c("constant", "new")

# Data for r2
data_r2 <- tmp_SAR[!tmp_SAR$category %in% c("RCPP", "RCPN", "RCN", "RCA"), c("category", "avgConstant", "avgNew")]
data_r2$group = "SAR"
colnames(data_r2)[c(2,3)] <- c("constant", "new")

# Combine the data
data_combined <- rbind(data_r1, data_r2)

data_combined <- data_combined[data_combined$category %in% unique(c(data_r1$category[order(data_r1$new, decreasing = TRUE)][1:5], data_r2$category[order(data_r2$new, decreasing = TRUE)][1:5])),]


# Reshape the data to long format for ggplot
data_long <- melt(data_combined, id.vars = c("category", "group"), 
                  variable.name = "type", value.name = "value")

# Create a new column to distinguish between the groups and types for coloring
data_long$group_type <- interaction(data_long$group, data_long$type)

# rename group_type
levels(data_long$group_type) <- c("RR (constant)", "SAR (constant)", "RR (new)", "SAR (new)")

# Create the grouped barplot
ggplot(data_long, aes(x = category, y = value, fill = group_type)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.9) +
    geom_text(aes(label = value, y = value + 0.02), 
            position = position_dodge(width = 0.7), vjust = 0, hjust = .2) +
  coord_flip() +
  labs(title = "Grouped Barplot of constant and new terms of robots for single categories",
       x = "Category",
       y = "Average number of drawn concepts",
       fill = "Robot (type)") +
  theme_minimal() +
  scale_fill_manual(values = c("RR (constant)" = "darkblue", "SAR (constant)" = "lightblue", 
                               "RR (new)" = "darkgreen", "SAR (new)" = "lightgreen")) +
  theme(legend.position = "top",
        axis.title.x = element_text(size = 12),
        axis.title.y = element_text(size = 12))
```



### create data.frame of all words for ChatGPT


```{r}
saveWordsByCategory <- function(chooseRobot){
  
  wb <- openxlsx::createWorkbook()
  
for (c in 1:length(ids_categories)) {
  # print(c)

  tmp_constant <- list_text_constant[[ids_categories[c]]]
  tmp_constant <- tmp_constant[!is.na(tmp_constant)]
  
  tmp_old <- list_text_old[[ids_categories[c]]]
  tmp_old <- tmp_old[!is.na(tmp_old)]
  
  tmp_new <- list_text_new[[ids_categories[c]]]
  tmp_new <- tmp_new[!is.na(tmp_new)]
  
  
  tmp_constant <- tmp_constant[names(tmp_constant) %in% questionnaire$PROLIFIC_PID[questionnaire$choosen_Robot %in% chooseRobot]]
  tmp_old <- tmp_old[names(tmp_old) %in% questionnaire$PROLIFIC_PID[questionnaire$choosen_Robot %in% chooseRobot]]
  tmp_new <- tmp_new[names(tmp_new) %in% questionnaire$PROLIFIC_PID[questionnaire$choosen_Robot %in% chooseRobot]]
  
  
  
  tmp_maxLength <- max(length(unlist(tmp_constant)), length(unlist(tmp_old)), length(unlist(tmp_new)))
  
  dat <- data.frame(constant = c(unlist(tmp_constant), rep(NA, each = tmp_maxLength - length(unlist(tmp_constant)))), 
                    old = c(unlist(tmp_old), rep(NA, each = tmp_maxLength - length(unlist(tmp_old)))), 
                    new = c(unlist(tmp_new), rep(NA, each = tmp_maxLength - length(unlist(tmp_new)))))

  
  rownames(dat) <- NULL
  
  
  ## add comments for constant
  dat$constant_comments <- NA

  tmp_constant <- unlist(tmp_constant)
  names(tmp_constant) <- str_trunc(string = names(tmp_constant), width = 24, ellipsis = "")

    for(j in 1:length(tmp_constant)){
      tmp <-  CAMfiles_combined[[1]]$comment[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% names(tmp_constant)[j] & CAMfiles_combined[[1]]$text %in% tmp_constant[[j]]]
      
      if(length(tmp[nchar(tmp) >= 1]) >= 1){
              dat$constant_comments[j] <- paste0(tmp[nchar(tmp) >= 1], collapse = " // ")
      }
    }
  dat$constant_comments[dat$constant_comments == ""] <- NA
  
  
    ## add comments for old
  dat$old_comments <- NA

  tmp_old <- unlist(tmp_old)
  names(tmp_old) <- str_trunc(string = names(tmp_old), width = 24, ellipsis = "")

  if(!is.null(tmp_old)){
        for(j in 1:length(tmp_old)){
          
          
                tmp <- CAMfiles_combined[[1]]$comment[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% names(tmp_old)[j] & CAMfiles_combined[[1]]$text %in% tmp_old[[j]]]
      
      if(length(tmp[nchar(tmp) >= 1]) >= 1){
              dat$old_comments[j] <- paste0(tmp[nchar(tmp) >= 1], collapse = " // ")
      }
    }
  dat$old_comments[dat$old_comments == ""] <- NA
  }

  
  ## add comments for new
  dat$new_comments <- NA

  tmp_new <- unlist(tmp_new)
  names(tmp_new) <- str_trunc(string = names(tmp_new), width = 24, ellipsis = "")

    for(j in 1:length(tmp_new)){
      tmp <- CAMfiles_combined[[1]]$comment[str_remove_all(string = CAMfiles_combined[[1]]$participantCAM, pattern = "_pre$|_post$") %in% names(tmp_new)[j] & CAMfiles_combined[[1]]$text %in% tmp_new[[j]]]
      
            
      if(length(tmp[nchar(tmp) >= 1]) >= 1){
              dat$new_comments[j] <- paste0(tmp[nchar(tmp) >= 1], collapse = " // ")
      }
    }
  dat$new_comments[dat$new_comments == ""] <- NA

  
  ## add worksheet
  addWorksheet(wb, ids_categories[c])
writeData(wb, ids_categories[c], dat)
} 
  # Save the workbook
saveWorkbook(wb, paste0(paste0(chooseRobot, collapse = "_"), "_multipleSheets.xlsx"), overwrite = TRUE)

return("Saved")
}
```

```{r}
  setwd("outputs/03_dataAnalysis_RQ")
saveWordsByCategory(chooseRobot = c("rescue robot", "social assistance robot"))
saveWordsByCategory(chooseRobot = c("rescue robot"))
saveWordsByCategory(chooseRobot = c("social assistance robot"))
```


# R3: Perceived risks and benefits mediated by gender and age

blub




# ADDITIONAL ANALYSES

## check single scales and compute mean variables

### Almere

#### Anxiety dimension


```{r}
#| label: Almere Anxiety
#| warning: false

regEx <- "^Almere.*anx$"
nameScale <- "Almere - Anxiety"
nameVariable <- "mean_AlmereAnxiety"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


#### Attitude dimension


```{r}
#| label: Almere Attitude
#| warning: false

regEx <- "^Almere.*att$"
nameScale <- "Almere - Attitude"
nameVariable <- "mean_AlmereAttitude"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


### Li & Wang (2021)

#### Anthropomorphism dimension


```{r}
#| label: Li & Wang Anthropomorphism
#| warning: false

regEx <- "^LiWang.*anthropomorphism$"
nameScale <- "LiWang - Anthropomorphism"
nameVariable <- "mean_LiWangAnthropomorphism"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


#### Autonomy dimension


```{r}
#| label: Li & Wang Autonomy
#| warning: false

regEx <- "^LiWang.*autonomy$"
nameScale <- "LiWang - Autonomy"
nameVariable <- "mean_LiWangAutonomy"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```



### General Attitudes Towards Robots Scale, GAToRS (2022)

#### Personal Level Positive Attitude

```{r}
#| label: GAToRS PP
#| warning: false

regEx <- "^GAToRS.*pp$"
nameScale <- "GAToRS - PP"
nameVariable <- "mean_GAToRSpp"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```




#### Personal Level Negative Attitude

```{r}
#| label: GAToRS PN
#| warning: false

regEx <- "^GAToRS.*pn$"
nameScale <- "GAToRS - pn"
nameVariable <- "mean_GAToRSpn"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


#### Societal Level Positive Attitude

```{r}
#| label: GAToRS SP
#| warning: false

regEx <- "^GAToRS.*sp$"
nameScale <- "GAToRS - sp"
nameVariable <- "mean_GAToRSsp"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```


#### Societal Level Negative Attitude

```{r}
#| label: GAToRS SN
#| warning: false

regEx <- "^GAToRS.*sn$"
nameScale <- "GAToRS - sn"
nameVariable <- "mean_GAToRSsn"

### number of items
sum(str_detect(string = colnames(questionnaireCAMs), pattern = regEx))

### get correlation plot, descriptives, EFA, CFA

### EFA
tmp <- CFAstats(dataset = questionnaireCAMs, regularExp = regEx, labelLatent = str_remove(string = nameVariable, pattern = "mean_"), 
                showPlots = TRUE, 
                computeEFA = TRUE, 
                computeCFA = TRUE, 
                computeCFAMplus = FALSE)

### variable mean
questionnaireCAMs[[nameVariable]]  <- questionnaireCAMs %>%
  select(matches(regEx)) %>%
  rowMeans(na.rm = TRUE)
```

## differences survey means

```{r}
## split by robot
psych::describe(mean_AlmereAnxiety + mean_AlmereAttitude + mean_LiWangAnthropomorphism + mean_LiWangAutonomy + mean_GAToRSpp + mean_GAToRSpn + mean_GAToRSsp + mean_GAToRSsn ~ choosen_Robot, data = questionnaireCAMs)
```
